"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-f25=*-n-oj&(z_t_3i#l%^dr^=yn5t0d*2nocp*5e62=@igj#y"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",  # 可选，做 refresh 黑名单功能
    'drf_spectacular',
    "debug_toolbar",

    "users",
    "articles",
    "social",
    "verify",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "img/"
MEDIA_ROOT = BASE_DIR / 'img'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'users.CustomUser'

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=300),  # access token 30 分钟过期
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # refresh token 1 天过期
    "ROTATE_REFRESH_TOKENS": True,  # 刷新时颁发新的 refresh
    "BLACKLIST_AFTER_ROTATION": True,  # 旧的 refresh 失效
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

REST_FRAMEWORK = {
    # 认证
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),

    # 权限
    # 公开的接口，视图内单独进行覆盖设置
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # 默认所有接口都需要登录
        "services.permissions.IsActiveAccount",  # 默认所有的接口都需要激活访问
    ),

    # 限流
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "user": "30/min",  # 每个用户每分钟最多30次请求
        "anon": "20/min",  # 匿名用户每分钟最多20次
    },

    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # 每页显示的文章数量

    # API 文档
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'My Simple Blog Project API',
    'DESCRIPTION': '这是我的 DRF 简易博客项目 API 文档',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SECURITY': [{'Bearer': []}],  # 告诉 OpenAPI 使用 Bearer token
}

# 配置日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # 日志格式
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },

    # 日志输出
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(BASE_DIR / 'logs/blog.log'),  # 需转换为 str,
            'formatter': 'verbose',
            'maxBytes': 100 * 1024 * 1024,  # 最大 100MB
            'backupCount': 10,
            'encoding': 'utf-8',
        },
    },

    # 日志管理器
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

# 跨域配置
CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = [
    'http://127.0.0.1:8000',
]
CORS_ALLOW_CREDENTIALS = True

# 配置 Redis 缓存
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'captcha': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'email': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/3',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}

# 验证码过期时间
CAPTCHA_EXPIRE_SECONDS = 60 * 5
DEFAULT_EXPIRE_SECONDS = 60 * 5
EMAIL_EXPIRE_SECONDS = 60 * 5

# 邮箱设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = '13820826029@163.com'
EMAIL_HOST_PASSWORD = 'JBx8sk3ARxSULPvU'  # 授权码
EMAIL_USE_TLS = True  # 是否使用TLS安全连接

# 邮箱验证回调地址
EMAIL_ACTIVATE_RETURN_URL = 'http://127.0.0.1:8000'

# sms 配置
SMS_CONFIG = {
    'account_id': '2c94811c9787a27f0198447ee07d2808',
    'app_id': '2c94811c9787a27f0198447ee23d280f',
    'account_key': '66f89fc6785244d9baffb30f6a906d59',
    'template_id': '1'
}

# 第三方登录密钥
# 微博
WEIBO_APP_KEY = '1772507673'
WEIBO_APP_SECRET = '6e74162f453994e7e03baf4c099271a0'
WEIBO_REDIRECT_URI = 'https://api.weibo.com/oauth2/default.html'

# 自定义登录校验（支持用户名或者邮箱）
AUTHENTICATION_BACKENDS = [
    'services.auth.EmailOrUsernameBackend',
]

# Debugger地址
INTERNAL_IPS = [
    "127.0.0.1",
    "localhost",
]
